Snapshots, Not Differences:
Git thinks of its data more like a series of snapshots of a miniature filesystem. 
Every time you commit, or save the state of your project, Git basically takes a picture of what all your files look
like at that moment and stores a reference to that snapshot. To be efficient, if files have not changed, 
Git doesn’t store the file again, just a link to the previous identical file it has already stored.


$ git init
that contains all of your necessary repository files.which is where almost everything that Git stores
 and manipulates is located

config
description
HEAD
hooks/
info/
objects/
refs/

1. The description file is used only by the GitWeb program, so don’t worry about it.
2. The config file contains your project-specific configuration options.
3. and the info directory keeps a global exclude file for ignored patterns that you don’t want to track in a .gitignore file.
4. The hooks directory contains your client- or server-side hook scripts.

Four important entries:
1. Objects: The objects directory stores all the content for your database.
   It contains our original data files and all the log messages, author information, 
   dates, and other information required to rebuild any revision or branch of the project
   
   Every object consists of three things- a type, a size, and content
   The size is simply the size of the contents, the content depends on what type of object is
   
   there are four different types of objects: “blob”, “tree”, “commit”, and “tag”.
   Git stores these different types of objects in.
   * A “blob” is used to store file data- it is generally a file.
   * A “tree” is basically like a directory- it references a bunch of other trees and blobs 
     (i.e. files and sub-directories)
   * A “commit” object holds metadata for each change introduced in the repository, 
     including the author, committer, commit-data, and log- messages.
   * A “tag” object assigns an arbitrary human-readable name to a specific object usually a commit	

2. Head: The HEAD file points to the branch you currently have checked out.
3. The index file is where Git stores your staging area information.
4. The refs directory stores pointers into commit objects in that data (branches, tags, remotes and more).


Cloning an Existing Repository:
    git clone https://github.com/libgit2/libgit2
    Git receives a full copy of nearly all data that the server has.
    Every version of every file for the history of the project is pulled down by default when you run git clone.

Tracked or Untracked:
   * Tracked files are files that were in the last snapshot, as well as any newly staged files.
   * Untracked files are any files in your working directory that were not in your last snapshot and are not in your staging area

How does git know when there is change in the local repo?
   So if you have a committed version of a file, and a working-copy version, all Git has to do is 
   calculate a hash value for the working file and compare it to the already-calculated hash from the committed snapshot.
   If the hashes aren't the same, then it knows something has changed.

   calculation only happens when you ask (e.g. git status or git diff). It is not constantly checking on its own.

$ git add .:
   The "git add" command takes a path name for either a file or a directory; if it’s a directory,
   the command adds all the files in that directory recursively
   
   It takes to file into a staged area and prepare them for commit.
   And all the stages file stored in index file in .git ignore directory.

   ** we can remove any file from stagin are by -> git rm --cached [file name]/ git rm -r --cached [directory]

$ .gitignore: 
   you’ll have a class of files that you don’t want Git to automatically add or even show you as being untracked.

   Force any file to add stage area you need to run -> git add -f "filename"

To see the current status of my project:
   -> git status  # tell us about Changes to be committed, Changes not staged for commit
   -> git diff    # show us the exect changes in folder if it is in unstaged area.

$ git commit:
   If you commit at this point, the version of the file at the time you ran git add is what will be 
   in the subsequent historical snapshot
   Remember that the commit records the snapshot you set up in your staging area.

   When you create the commit by running git commit, Git checksums each subdirectory 
   (in this case, just the root project directory) and stores them as a tree object in the Git repository. 
   Git then creates a commit object that has the metadata and a pointer to the root project tree so 
   it can re-create that snapshot when needed.

   Your Git repository now contains five objects: three blobs (each representing the contents of one of the three files), 
   one tree that lists the contents of the directory and specifies which file names are stored as which blobs, 
   and one commit with the pointer to that root tree and all the commit metadata

$ Skipping the Staging Area:
   ** git commit -a -m 'Add new benchmarks' # we can skip the staging area and commit with 
   automatically stage every file that is already tracked before doing the commit.

$ Removing Files:
   -> git rm --cached README

$ Moving Files:
   git mv file_from file_to

$ Viewing the Commit History:
   * git log  -> It shows lists the commits made in that repository in reverse chronological order
   * git log -p -2  -> which shows the difference (the patch output) introduced in each commit. 
     You can also limit the number of log entries displayed, such as using -2 to show only the last two entries.
	
   * git log --pretty=oneline  -> The oneline value for this option prints each commit on a single line, 
     which is useful if you’re looking at a lot of commits.

   * git log --pretty=format:"%h - %an, %ar : %s"  ->This is especially useful when you’re generating output for 
     machine parsing — because you specify the format explicitly, you know it won’t change with updates to Git
   
   * git log --oneline --decorate --graph --all -> show commit with graphical representation.
   * git log --pretty=format:"%h %s" --graph  -> This option adds a nice little ASCII graph showing your branch and merge history
   * git log --since=2.weeks  -> This command gets the list of commits made in the last two weeks

   **  if you want to see which commits modifying test files in the Git source code history were committed 
       by Junio Hamano in the month of October 2008 and are not merge commits, you can run something like this:
		->  git log --pretty="%h - %s" --author='Junio C Hamano' --since="2008-10-01" \
   		    --before="2008-11-01" --no-merges -- t/

$ Git Basics - Undoing Things:
   * git commit --amend -> when you commit too early and possibly forget to add some files, 
				or you mess up your commit message. If you want to redo that commit, 
				make the additional changes you forgot, stage them, and commit again 
				using the --amend option.
				
				But it will not work when commit has poshed already. To make it happend you to
				git pull frist then push the new commit with --amend
   * Unstaging a Staged File:
	* git reset HEAD "file name" -> It will unstaged any file form staged area. 
	* git restore --staged CONTRIBUTING.md  -> instad of git reset with can user git restore to remove a file 
						   from staged area. 

   * Unmodifying a Modified File:
	* git checkout -- CONTRIBUTING.md --> To remove the change from you local file and that is not staged yeat.

$ Working with Remotes:
   * Showing Your Remotes:
      * git remote -v
      
   
   * Adding Remote Repositories:
      * git remote add <shortname> <url> 

   * fatch all the data from remote repo
      * git fetch remote_repo_sort_name

   * Fetching and Pulling from Your Remotes:
      * git fetch <remote> --> It’s important to note that the git fetch command only downloads the data to your 
                 	        local repository — it doesn’t automatically merge it with any of your work or modify what 
			        you’re currently working on. You have to merge it manually into your work when you’re ready.

      * git pull --> If your current branch is set up to track a remote branch.
		  you can use the git pull command to automatically fetch and 
      		  then merge that remote branch into your current branch.

   * Pushing to Your Remotes:
      * git push <remote> <branch> -> This command works only if you cloned from a server to which you have write access 
				      and if nobody has pushed in the meantime. If you and someone else clone 
 				      at the same time and they push upstream and then you push upstream, your push 
				      will rightly be rejected. You’ll have to fetch their work first and incorporate 
				      it into yours before you’ll be allowed to push.

   * Inspecting a Remote:
      * git remote show origin

   * Renaming and Removing Remotes:
      * git remote rename oldname newname  -> rename a remote repos
      * git remote remove remote_name -> remove remote 

$ Creating Tags:
   * Annotated Tags:
      * git tag -a v1.4 -m "my version 1.4" -> That shows the tagger information, the date the commit was tagged, 
					       and the annotation message before showing the commit information.
   * Lightweight Tags:
      *  git tag v1.4-lw.

   * Sharing Tags to remote. 
      * git push origin v1.5
      * git push origin --tags  -> This will transfer all of your tags to the remote server that are not already there
      
   * Deleting Tags:
      * git tag -d v1.4-lw  -> delete tags from local git directory.
      * git push origin --delete <tagname>  -> delte tags form remote server.

$ Checking out Tags:
   * git checkout v2.0.0  -> checkout a spacific verions of tag.
   * git checkout -b version2 v2.0.0  --> create a brach with spacific version of tag

$ Git Aliases:
   * Git doesn’t automatically infer your command if you type it in partially. 
     If you don’t want to type the entire text of each of the Git commands, 
     you can easily set up an alias for each command using git config. Here are a couple of examples 
     you may want to set up. 
     --> $ git config --global alias.co checkout
	 $ git config --global alias.br branch
	 $ git config --global alias.ci commit
	 $ git config --global alias.st status
    --> This means that, for example, instead of typing git commit, you just need to type git ci


$ Branches in a Nutshell:

   * git branch -v  -> To see last commit of each branch

   * Creating a New Branch:
	What happens when you create a new branch? Well, doing so creates a new pointer for you to move around.
	-> git branch testing
	This creates a new pointer to the same commit you’re currently on.
	
	-> git checkout -b hotfix -> create and checkout branch
   * Remove Branch:
      * git branch -d hotfix  -> delete banch form local
      * git branch -D hotfix  -> force to delete banch form local
      * git push origin --delete hotfix  -> delete branch form remote
   
   * Checkout Branch:
      * git checkout master

   * Merge Branch:
      * fast forword merge:
          -> When you try to merge one commit with a commit that can be reached by following the first commit’s history, 
  	     Git simplifies things by moving the pointer forward because there is no divergent work to merge together — 
    	     this is called a “fast-forward
      	
	     * git merge hotfix

   * Three way merge:
      * When  your development history has diverged from some older point. Because the commit on 
        the branch you’re on isn’t a direct ancestor of the branch you’re merging in, Git has to do some work. 
        In this case, Git does a simple three-way merge, using the two snapshots pointed to by the branch tips and 
        the common ancestor of the two.

        Instead of just moving the branch pointer forward, Git creates a new snapshot that results from this 
	three-way merge and automatically creates a new commit that points to it. This is referred to as a merge commit, 
	and is special in that it has more than one parent.

   * Marge Conflict
      * after solve the confict manually
	-> git add .
	-> git commit
	-> git poush
  
  

$ Branch Management:
   * git branch -v  -> To see the last commit on each branch
   * git branch --merged  -> To see which branches are already merged into the branch you’re on
			     Branches on this list without the * in front of them are generally fine 
			     to delete with git branch -d; you’ve already incorporated their work into another branch,

   * git branch --no-merged  -> This shows your other branch. Because it contains work that isn’t merged in yet. 
	
   * Changing a branch name:
      -> git branch --move old_branch_name, new_banch_name
  
   * Pushing:
      * git push origin branch
      * git push origin serverfix:awesomebranch ->  to push your local serverfix branch to the awesomebranch branch 
						    on the remote project.
            
$ Rebasing:
   * you can take the patch of the change that was introduced in C4 and reapply it on top of C3
   * To do rebasing:
      * git checkout branch_name -> that you want to rebase
      * git rebase master -> whare you want to marge
      * git checkout master
      * git merge experiment 
   
   * More Interesting Rebases:
      You can also have your rebase replay on something other than the rebase target branch. 
      Take a history like A history with a topic branch off another topic branch, for example. 
      You branched a topic branch (server) to add some server-side functionality to your project, and made a commit. 
      Then, you branched off that to make the client-side changes (client) and committed a few times. Finally, 
      you went back to your server branch and did a few more commits.

      Suppose you decide that you want to merge your client-side changes into your mainline for a release, 
      but you want to hold off on the server-side changes until it’s tested further. You can take the changes on 
      client that aren’t on server (C8 and C9) and replay them on your master branch by using the --onto option of 
      git rebase
   
      * git rebase --onto master server client
      * git checkout master
      * git merge client
